{"version":3,"sources":["Tester.js","App.js","reportWebVitals.js","index.js"],"names":["para","App","useState","words","setWords","timer","setTimer","arr","setArr","correct","setCorrect","wordArr","setWordArr","acc","setAcc","useEffect","trim","split","slice","length","filter","item","i","Math","ceil","class","value","disabled","onChange","e","target","handleChange","onClick","theInt","setInterval","prev","clearInterval","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAAMA,EAAO,owB,eCkDEC,MA9Cf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAEAC,EAFA,OAGSJ,mBAAS,IAHlB,mBAGNK,EAHM,KAGDC,EAHC,OAIiBN,mBAAS,GAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKgBR,mBAAS,IALzB,mBAKNS,EALM,KAKEC,EALF,OAMSV,mBAAS,GANlB,mBAMNW,EANM,KAMDC,EANC,KAmCb,OAxBAC,qBAAU,WACG,IAARV,IACDO,EAAWT,EAAMa,OAAOC,MAAM,MAC9BT,EAAOR,EAAKiB,MAAM,KAAKC,MAAM,EAAEP,EAAQQ,SACvCT,EAAWH,EAAIa,QAAO,SAACC,EAAKC,GAAN,OAAYD,IAAOV,EAAQW,MAAIH,QACrDL,EAAOS,KAAKC,KAAMf,EAASF,EAAIY,OAAS,SAEzC,CAACd,EAAMF,EAAMQ,EAAQJ,EAAIE,IAkB1B,sBAAKgB,MAAM,MAAX,UACE,wDACA,6BAAKpB,EAAM,EAAEA,EAAR,eAA8B,KAARF,EAA4B,EAAjBQ,EAAQQ,OAAW,EAApD,+BAAoF,KAARhB,EAAWU,EAAI,EAA3F,OACL,4BAAIb,IACJ,0BAAU0B,MAAOvB,EAAOwB,SAAUtB,EAAM,IAAY,IAARA,EAAWuB,SAAU,SAACC,GAAD,OAjCrE,SAAsBA,GACpBzB,EAASyB,EAAEC,OAAOJ,OAgCwDK,CAAaF,MAAM,uBAC3F,wBAAQF,SAAUtB,EAAM,IAAIA,EAAM,EAAG2B,QAAS,kBArBlD,WACItB,EAAW,GACXI,EAAO,GACPV,EAAS,IACTQ,EAAW,IACXJ,EAAO,IACPF,EAAS,IACT,IAAI2B,EAASC,aAAY,WACvB5B,GAAS,SAAA6B,GAAI,OAAIA,EAAK,EAAEA,EAAK,EAAE,OAC9B,KACO,IAAR9B,GACD+B,cAAcH,GAUqCI,IAApD,uBCjCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.401cc714.chunk.js","sourcesContent":["const para = \"This is a typing speed test. Your typing speed per minute and accuracy will be evaluated. This is great practice for new typists and experienced typists. This is a typing speed test. Your typing speed per minute and accuracy will be evaluated. This is great practice for new typists and experienced typists. This is a typing speed test. Your typing speed per minute and accuracy will be evaluated. This is great practice for new typists and experienced typists. This is a typing speed test. Your typing speed per minute and accuracy will be evaluated. This is great practice for new typists and experienced typists. This is a typing speed test. Your typing speed per minute and accuracy will be evaluated. This is great practice for new typists and experienced typists.\"\r\nexport {para}","import React,{useState,useEffect} from \"react\";\nimport {para} from './Tester'\nimport './App.css';\n\nfunction App() {\n  const [words,setWords] = useState('')\n  const [timer,setTimer] = useState(20)\n  const [arr, setArr] = useState([])\n  const [correct, setCorrect] = useState(0)\n  const [wordArr,setWordArr] = useState([])\n  const [acc, setAcc] = useState(0)\n  function handleChange(e){\n    setWords(e.target.value) \n  }\n\n  useEffect(() => {\n    if(timer===0){\n      setWordArr(words.trim().split(' '))\n      setArr(para.split(' ').slice(0,wordArr.length)) \n      setCorrect(arr.filter((item,i) => item===wordArr[i]).length)\n      setAcc(Math.ceil((correct/(arr.length))*100))\n    }\n  }, [timer,words,wordArr,arr,correct])\n  \n  function handleClick(){\n      setCorrect(0)\n      setAcc(0)\n      setWords(\"\")\n      setWordArr([])\n      setArr([])\n      setTimer(20)\n      let theInt = setInterval(() =>{\n        setTimer(prev => prev>1?prev-1:0)\n      }, 1000)\n     if(timer===0){\n       clearInterval(theInt)\n     }\n  }\n  \n  return (\n    <div class=\"app\">\n      <h1>Test your typing skill</h1>\n      <h3>{timer>0?timer:`WPM: ${words!==\"\"?wordArr.length * 3:0}          Accuracy: ${words!==\"\"?acc:0}%`}</h3>\n      <p>{para}</p>\n      <textarea value={words} disabled={timer>19||timer===0} onChange={(e) => handleChange(e)} /><br />\n      <button disabled={timer<20&&timer>0} onClick={() => handleClick()}>Start</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}